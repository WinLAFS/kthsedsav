# -----------------------------------------------------------------------------
# CONTROLLER DESCRIPTORS
# -----------------------------------------------------------------------------

(optimizationLevel
  # choose one of the following optimization options:
  none
  # mergeControllers
  # mergeControllersAndInterceptors
  # mergeControllersAndContent
  # mergeControllersInterceptorsAndContent
)

#=========================================================================
# Additionnal controllers interfaces for reflexive components
#=========================================================================

# reflex-controller interface
# mainly allows :
# - to set/get the reference of the dual component 
#    associated to the current component
# - to get the level of a component (exec / meta)

(reflex-controller-itf
  (reflex-controller fr.jade.reflex.api.control.ReflexController)
)

# Notifications interfaces
# perform a control operation without forwarding the operation to the dual level 

(generic-factory-notification-itf
  (generic-factory-notification fr.jade.reflex.api.factory.GenericFactoryNotification)
)

(generic-attribute-notification-controller-itf
  (generic-attribute-notification-controller fr.jade.reflex.api.control.GenericAttributeNotificationController)
)

(binding-notification-controller-itf
  (binding-notification-controller fr.jade.reflex.api.control.BindingNotificationController)
)


(content-notification-controller-itf
  (content-notification-controller fr.jade.reflex.api.control.ContentNotificationController)
)

(lifecycle-notification-controller-itf
  (lifecycle-notification-controller fr.jade.reflex.api.control.LifeCycleNotificationController)
)

(name-notification-controller-itf
  (name-notification-controller fr.jade.reflex.api.control.NameNotificationController)
)

# -----------------------------------------------------------------------------
# CONTROLLER OBJECTS
#
# each definition must be an object descriptor
# -----------------------------------------------------------------------------

#=========================================================================
# Additionnal controllers implementation for reflexive components
# Principle : a reflexive component is associated to "reflexive" controllers
# Reflexive controllers are standard Julia controllers, except that they 
# notify the dual level (meta / exec) of any operation they perform.
# The notification of the dual level is managed by a specific
# mixin.
#=========================================================================

# ReflexController implementation

(reflex-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexControllerImpl
    org.objectweb.fractal.julia.BasicControllerMixin
    org.objectweb.fractal.julia.control.name.UseNameControllerMixin
    org.objectweb.fractal.julia.UseComponentMixin
    fr.jade.reflex.control.BasicReflexControllerMixin
  ))
)

# GenericFactory implementation
# A generic factory mainly allows to create component instances

(reflex-generic-factory-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexGenericFactoryImpl

   # Allows to associate the controller to a component
    org.objectweb.fractal.julia.BasicControllerMixin
    
    # Allows the current controller to use the Loader controller
    org.objectweb.fractal.julia.loader.UseLoaderMixin
    
    # Allows the current controller to use the TypeFactory controller
    org.objectweb.fractal.julia.type.UseTypeFactoryMixin
    
    # Allows the current controller to use the Binding controller
    org.objectweb.fractal.julia.control.binding.UseBindingControllerMixin
    
    # Provides a basic implementation of the GenericFactory interface
    org.objectweb.fractal.julia.factory.BasicGenericFactoryMixin
    
    # to check the component content descriptor with the Java Reflection API:
    #org.objectweb.fractal.julia.factory.CheckGenericFactoryMixin
    
    # use the reflex controller to notify the dual level
    org.objectweb.fractal.julia.UseComponentMixin
    #org.objectweb.fractal.julia.control.content.UseContentControllerMixin
    fr.jade.reflex.control.UseReflexControllerMixin
    fr.jade.reflex.factory.ReflexGenericFactoryMixin
  ))
)

# ReflexGenericAttributeController implementation

(reflex-generic-attribute-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexGenericAttributeControllerImpl
    org.objectweb.fractal.julia.BasicControllerMixin
    
    #fr.jade.reflex.control.attribute.GenericAttributeControllerMixin
    fr.jade.fractal.julia.control.genericattribute.GenericAttributeControllerMixin
    
    # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    fr.jade.reflex.control.attribute.ReflexGenericAttributeControllerMixin
  ))
)

(reflex-composite-generic-attribute-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexCompositeGenericAttributeControllerImpl
    org.objectweb.fractal.julia.BasicControllerMixin
    
    # use the component controller
    org.objectweb.fractal.julia.UseComponentMixin
    
    # use the content controller
    org.objectweb.fractal.julia.control.content.UseContentControllerMixin
    
    #fr.jade.reflex.control.attribute.GenericCompositeAttributeControllerMixin
    fr.jade.fractal.julia.control.genericattribute.GenericCompositeAttributeControllerMixin
    
    # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    fr.jade.reflex.control.attribute.ReflexCompositeGenericAttributeControllerMixin
  ))
)

# BindingController implementation (for primitive components without content)
# the following implementation manages the connection with the SR service

(reflex-primitive-binding-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexPrimitiveBindingControllerImpl
    
    # Allows to associate the controller to a component
    org.objectweb.fractal.julia.BasicControllerMixin
    
    # Provides a basic implementation of the Binding controller interface
    org.objectweb.fractal.julia.control.binding.BasicBindingControllerMixin
    
    # to initialize the BasicBindingControllerMixin from the component's type:
    org.objectweb.fractal.julia.control.binding.TypeBasicBindingMixin
    
    # to check some basic pre conditions (interface not already bound, ...)
    org.objectweb.fractal.julia.UseComponentMixin
    
    ###
    org.objectweb.fractal.julia.control.binding.CheckBindingMixin
    
    # to check type related constraints for bindings:
    org.objectweb.fractal.julia.control.binding.TypeBindingMixin
    
    # to check content related constraints for bindings:
    org.objectweb.fractal.julia.control.content.UseSuperControllerMixin
    org.objectweb.fractal.julia.control.binding.ContentBindingMixin
    
    # to check lifecycle related constraints for bindings:
    org.objectweb.fractal.julia.control.lifecycle.UseLifeCycleControllerMixin
    org.objectweb.fractal.julia.control.binding.LifeCycleBindingMixin
    
    # notify the reverse-binding controller of the bound component
    fr.jade.fractal.julia.control.binding.BindingWithReverseBindingControllerNotifierMixin
        
    # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    org.objectweb.fractal.julia.control.name.UseNameControllerMixin
    fr.jade.reflex.control.binding.ReflexBindingMixin
  ))
)

# BindingController implementation (for primitive components with content)
# the following implementation manages the connection with the SR service

(reflex-container-binding-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexContainerBindingControllerImpl
    
    # Allows to associate the controller to a component
    org.objectweb.fractal.julia.BasicControllerMixin
    
    # Provides a "container" implementation of the Binding controller interface
    org.objectweb.fractal.julia.control.binding.ContainerBindingControllerMixin
    
    # to skip Interface objects before delegating to the encapsulated component:
    # org.objectweb.fractal.julia.control.binding.OptimizedContainerBindingMixin
    
    # to manage output interceptors:
    org.objectweb.fractal.julia.UseComponentMixin
    org.objectweb.fractal.julia.control.binding.InterceptorBindingMixin
    
    # to check some basic pre conditions (interface not already bound, ...)
    
    ###
    org.objectweb.fractal.julia.control.binding.CheckBindingMixin
    
    # to check type related constraints for bindings:
    org.objectweb.fractal.julia.control.binding.TypeBindingMixin
    
    # to check content related constraints for bindings:
    org.objectweb.fractal.julia.control.content.UseSuperControllerMixin
    org.objectweb.fractal.julia.control.binding.ContentBindingMixin
    
    # to check lifecycle related constraints for bindings:
    org.objectweb.fractal.julia.control.lifecycle.UseLifeCycleControllerMixin
    org.objectweb.fractal.julia.control.binding.LifeCycleBindingMixin
 
	# notify the reverse-binding controller of the bound component
    fr.jade.fractal.julia.control.binding.BindingWithReverseBindingControllerNotifierMixin
           
    # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    org.objectweb.fractal.julia.control.name.UseNameControllerMixin
    fr.jade.reflex.control.binding.ReflexBindingMixin
  ))
)

# BindingController implementation (for composite components)
# the following implementation manages the connection with the SR service

(reflex-composite-binding-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexCompositeBindingControllerImpl
    
    # Allows to associate the controller to a component
    org.objectweb.fractal.julia.BasicControllerMixin
    
    # Provides a basic implementation of the Binding controller interface
    org.objectweb.fractal.julia.control.binding.BasicBindingControllerMixin
    
    # to initialize the BasicBindingControllerMixin from the component's type:
    org.objectweb.fractal.julia.control.binding.TypeBasicBindingMixin
    
    # to check some basic pre conditions (interface not already bound, ...)
    org.objectweb.fractal.julia.UseComponentMixin
    
    ###
    org.objectweb.fractal.julia.control.binding.CheckBindingMixin
    
    # to check type related constraints for bindings:
    org.objectweb.fractal.julia.control.binding.TypeBindingMixin
    
    # to check content related constraints for bindings:
    org.objectweb.fractal.julia.control.content.UseSuperControllerMixin
    org.objectweb.fractal.julia.control.binding.ContentBindingMixin
    
    # to check lifecycle related constraints for bindings:
    org.objectweb.fractal.julia.control.lifecycle.UseLifeCycleControllerMixin
    org.objectweb.fractal.julia.control.binding.LifeCycleBindingMixin
    
    # to manage the getFcItfImpl links of the Interface objects:
    # choose one of ComponentBindingMixin and OptimizedCompositeBindingMixin
    # (the last one creates and updates shortcuts links when possible)
    org.objectweb.fractal.julia.control.content.UseContentControllerMixin
    
    org.objectweb.fractal.julia.control.binding.CompositeBindingMixin
    #org.objectweb.fractal.julia.control.binding.OptimizedCompositeBindingMixin

	# notify the reverse-binding controller of the bound component
    fr.jade.fractal.julia.control.binding.BindingWithReverseBindingControllerNotifierMixin
        
    # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    org.objectweb.fractal.julia.control.name.UseNameControllerMixin
    fr.jade.reflex.control.binding.ReflexBindingMixin
  ))
)

# ContentController implementation
# the following implementation manages the connection with the SR service

(reflex-content-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexContentControllerImpl
    
    # Allows to associate the controller to a component
    org.objectweb.fractal.julia.BasicControllerMixin
    org.objectweb.fractal.julia.UseComponentMixin
    org.objectweb.fractal.julia.control.content.BasicContentControllerMixin
    
    # to check some basic pre conditions, and to prevent hierarchy cycles:
    org.objectweb.fractal.julia.control.content.CheckContentMixin
    
    # to check type related constraints in getFcInternalInterface:
    org.objectweb.fractal.julia.control.content.TypeContentMixin
    
    # to check binding locality related constraints in removeFcSubComponent:
    org.objectweb.fractal.julia.control.content.BindingContentMixin
    
    # to check lifecycle related constraints:
    org.objectweb.fractal.julia.control.lifecycle.UseLifeCycleControllerMixin
    org.objectweb.fractal.julia.control.content.LifeCycleContentMixin
    
    # to notify sub components when they are added or removed from this component:
    org.objectweb.fractal.julia.control.content.SuperContentMixin
    
    # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    fr.jade.reflex.control.content.ReflexContentMixin
  ))
)


# LifeCycleController implementation (for primitive or composite components)
# the following implementation manages the connection with the SR service

(reflex-lifecycle-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexLifeCycleControllerImpl
    org.objectweb.fractal.julia.BasicControllerMixin
    org.objectweb.fractal.julia.UseComponentMixin
    org.objectweb.fractal.julia.control.lifecycle.BasicLifeCycleCoordinatorMixin
    org.objectweb.fractal.julia.control.lifecycle.BasicLifeCycleControllerMixin
    
    # to check that mandatory client interfaces are bound in startFc:
    org.objectweb.fractal.julia.control.lifecycle.TypeLifeCycleMixin
    
    # to notify the encapsulated component (if present) when its state changes:
    org.objectweb.fractal.julia.control.lifecycle.ContainerLifeCycleMixin
    
    # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    fr.jade.reflex.control.lifecycle.ReflexLifeCycleMixin
  ))
)

# LifeCycleController implementation (for composite components only)
# the following implementation manages the connection with the SR service

(reflex-composite-lifecycle-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexCompositeLifeCycleControllerImpl
    
    org.objectweb.fractal.julia.BasicControllerMixin
    org.objectweb.fractal.julia.UseComponentMixin
    org.objectweb.fractal.julia.control.lifecycle.BasicLifeCycleCoordinatorMixin
    org.objectweb.fractal.julia.control.lifecycle.OptimizedLifeCycleControllerMixin
    
    # to check that mandatory client interfaces are bound in startFc:
    org.objectweb.fractal.julia.control.lifecycle.TypeLifeCycleMixin
    
    # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    fr.jade.reflex.control.lifecycle.ReflexLifeCycleMixin
  ))
)

# NameController implementation
# the following implementation manages the connection with the SR service

(reflex-name-controller-impl
  ((org.objectweb.fractal.julia.asm.MixinClassGenerator
    ReflexNameControllerImpl
    
    org.objectweb.fractal.julia.BasicControllerMixin
    org.objectweb.fractal.julia.control.name.BasicNameControllerMixin
    
   # use the reflex controller to notify the dual level
    fr.jade.reflex.control.UseReflexControllerMixin
    fr.jade.reflex.control.name.ReflexNameMixin
  ))
)

# =========================================================================
# CONTROLLER DESCRIPTORS FOR REFLEXIVE COMPONENTS 
# =========================================================================

# definition of reflexive bootstrap
# this bootstrap creates a reflexive factory (such factory is associated
# to a dual factory, in charge of creating dual components)

(reflex-bootstrap
  (
    'interface-class-generator
    (
      'component-itf
      'type-factory-itf
      'generic-factory-itf
      'reflex-controller-itf
      'generic-factory-notification-itf
      'generic-installing-factory-itf
      #'super-controller-itf
      #'content-controller-itf
      #'content-notification-controller-itf
	  'name-controller-itf
	  'binding-controller-itf
      (loader org.objectweb.fractal.julia.loader.Loader)
    )
    (
      'component-impl
      'reflex-controller-impl
      'type-factory-impl
      'reflex-generic-factory-impl
      'generic-installing-factory-impl
      #'super-controller-impl
      #'reflex-content-controller-impl
	  'name-controller-impl
	  #'primitive-binding-controller-impl
      # choose one of the following classes:
      # the first one loads all classes from the classpath
      # the second one can generate missing classes on the fly, dynamically
      # org.objectweb.fractal.julia.loader.BasicLoader
      org.objectweb.fractal.julia.loader.DynamicLoader
    )
    (
      # no interceptors
    )
    org.objectweb.fractal.julia.asm.MergeClassGenerator
    none
  )
)

(reflex-jade-primitive
  (
    'interface-class-generator
    (
      'component-itf
      # interface to manage the connection with the SR
      'reflex-controller-itf
      'binding-controller-itf
      'binding-notification-controller-itf
      'super-controller-itf
      # only if super-controller-itf does not designate the Julia interface:
      # 'julia-super-controller-itf
      'lifecycle-controller-itf
      'lifecycle-notification-controller-itf
      # only if lifecycle-controller-itf does not designate the Julia interface:
      # 'julia-lifecycle-controller-itf
      'name-controller-itf
      'name-notification-controller-itf
      'reverse-binding-controller-itf
      'generic-attribute-controller-itf
      'generic-attribute-notification-controller-itf
    )
    (
      'component-impl
      # reflex implementations manage the connection with the SR
      'reflex-controller-impl
      'reflex-container-binding-controller-impl
      'super-controller-impl
      'reflex-lifecycle-controller-impl
      'reflex-name-controller-impl
      'reverse-binding-controller-impl
      'reflex-generic-attribute-controller-impl
    )
    (
      (org.objectweb.fractal.julia.asm.InterceptorClassGenerator
        org.objectweb.fractal.julia.asm.LifeCycleCodeGenerator
      )
    )
    org.objectweb.fractal.julia.asm.MergeClassGenerator
    'optimizationLevel
  )
)

(reflex-jade-parametricprimitive
  'reflex-primitive
)

(reflex-jade-composite
  (
    'interface-class-generator
    (
      'component-itf
      'reflex-controller-itf
      'binding-controller-itf
      'binding-notification-controller-itf
      'content-controller-itf
      'content-notification-controller-itf
      'super-controller-itf
      # only if super-controller-itf does not designate the Julia interface:
      # 'julia-super-controller-itf
      'lifecycle-controller-itf
      'lifecycle-notification-controller-itf
      # only if lifecycle-controller-itf does not designate the Julia interface:
      # 'julia-lifecycle-controller-itf
      'name-controller-itf
      'name-notification-controller-itf
      'reverse-binding-controller-itf
      'generic-attribute-controller-itf
      'generic-attribute-notification-controller-itf
    )
    (
      'component-impl
      # reflex implementations manage the  connection with the SR
      'reflex-controller-impl
      'reflex-composite-binding-controller-impl
	  'reflex-content-controller-impl
      'super-controller-impl
      'reflex-composite-lifecycle-controller-impl
      'reflex-name-controller-impl
      'reverse-binding-controller-impl
      'reflex-composite-generic-attribute-controller-impl
    )
    (
      # no interceptors
    )
    org.objectweb.fractal.julia.asm.MergeClassGenerator
    'optimizationLevel
  )
)


(reflex-jade-parametriccomposite
  (
    'interface-class-generator
    (
      'component-itf
      # interface to manage the connection with the SR
      'reflex-controller-itf
      'binding-controller-itf
      'binding-notification-controller-itf
      'content-controller-itf
      'content-notification-controller-itf
      'super-controller-itf
      # only if super-controller-itf does not designate the Julia interface:
      # 'julia-super-controller-itf
      'lifecycle-controller-itf
      'lifecycle-notification-controller-itf
      # only if lifecycle-controller-itf does not designate the Julia interface:
      # 'julia-lifecycle-controller-itf
      'name-controller-itf
      'name-notification-controller-itf
      'reverse-binding-controller-itf
      'generic-attribute-controller-itf
      'generic-attribute-notification-controller-itf
    )
    (
      'component-impl
      ((org.objectweb.fractal.julia.asm.AttributeControllerClassGenerator
        ('attributeControllerInterface)
      ))
      # following implementations manage the  connection with the SR
      'reflex-controller-impl
      'reflex-composite-binding-controller-impl
      'reflex-content-controller-impl
      'super-controller-impl
      'reflex-composite-lifecycle-controller-impl
      'reflex-name-controller-impl
      'reverse-binding-controller-impl
      'reflex-composite-generic-attribute-controller-impl
    )
    (
      # no interceptors
    )
    org.objectweb.fractal.julia.asm.MergeClassGenerator
    'optimizationLevel
  )
)


###############################################################################
# CUSTOM CONFIGURATION INFORMATION
###############################################################################
